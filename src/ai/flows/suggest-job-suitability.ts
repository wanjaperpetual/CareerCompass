// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Analyzes job information and determines job suitability based on user profile.
 *
 * - analyzeJobSuitability - A function that analyzes job suitability.
 * - JobSuitabilityInput - The input type for the analyzeJobSuitability function.
 * - JobSuitabilityOutput - The return type for the analyzeJobSuitability function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const JobSuitabilityInputSchema = z.object({
  userProfile: z
    .string()
    .describe('A description of the user profile, including skills, experience, and interests.'),
  jobDescription: z.string().describe('The full job description.'),
});
export type JobSuitabilityInput = z.infer<typeof JobSuitabilityInputSchema>;

const JobSuitabilityOutputSchema = z.object({
  suitabilityScore: z
    .number()
    .describe('A score from 0 to 1 indicating how suitable the job is for the user.'),
  justification: z
    .string()
    .describe('A justification for the suitability score, explaining why the job is or is not a good fit.'),
});
export type JobSuitabilityOutput = z.infer<typeof JobSuitabilityOutputSchema>;

export async function analyzeJobSuitability(
  input: JobSuitabilityInput
): Promise<JobSuitabilityOutput> {
  return analyzeJobSuitabilityFlow(input);
}

const prompt = ai.definePrompt({
  name: 'jobSuitabilityPrompt',
  input: {schema: JobSuitabilityInputSchema},
  output: {schema: JobSuitabilityOutputSchema},
  prompt: `You are a career advisor who analyzes job descriptions and user profiles to determine job suitability.

  Analyze the job description below and the user profile, and determine how suitable the job is for the user.
  Provide a suitability score between 0 and 1, where 1 is a perfect fit, and 0 is not a fit at all.
  Also, provide a justification for the score.

  User Profile: {{{userProfile}}}
  Job Description: {{{jobDescription}}}`,
});

const analyzeJobSuitabilityFlow = ai.defineFlow(
  {
    name: 'analyzeJobSuitabilityFlow',
    inputSchema: JobSuitabilityInputSchema,
    outputSchema: JobSuitabilityOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
